"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;

(function (factory) {
  var registeredInModuleLoader;

  if (typeof define === 'function' && define.amd) {
    define(factory);
    registeredInModuleLoader = true;
  }

  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {
    module.exports = factory();
    registeredInModuleLoader = true;
  }

  if (!registeredInModuleLoader) {
    var OldCookies = window.Cookies;
    var api = window.Cookies = factory();

    api.noConflict = function () {
      window.Cookies = OldCookies;
      return api;
    };
  }
})(function () {
  function extend() {
    var i = 0;
    var result = {};

    for (; i < arguments.length; i++) {
      var attributes = arguments[i];

      for (var key in attributes) {
        result[key] = attributes[key];
      }
    }

    return result;
  }

  function decode(s) {
    return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
  }

  function init(converter) {
    function api() {}

    function set(key, value, attributes) {
      if (typeof document === 'undefined') {
        return;
      }

      attributes = extend({
        path: '/'
      }, api.defaults, attributes);

      if (typeof attributes.expires === 'number') {
        attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
      } // We're using "expires" because "max-age" is not supported by IE


      attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

      try {
        var result = JSON.stringify(value);

        if (/^[\{\[]/.test(result)) {
          value = result;
        }
      } catch (e) {}

      value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
      key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
      var stringifiedAttributes = '';

      for (var attributeName in attributes) {
        if (!attributes[attributeName]) {
          continue;
        }

        stringifiedAttributes += '; ' + attributeName;

        if (attributes[attributeName] === true) {
          continue;
        } // Considers RFC 6265 section 5.2:
        // ...
        // 3.  If the remaining unparsed-attributes contains a %x3B (";")
        //     character:
        // Consume the characters of the unparsed-attributes up to,
        // not including, the first %x3B (";") character.
        // ...


        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
      }

      return document.cookie = key + '=' + value + stringifiedAttributes;
    }

    function get(key, json) {
      if (typeof document === 'undefined') {
        return;
      }

      var jar = {}; // To prevent the for loop in the first place assign an empty array
      // in case there are no cookies at all.

      var cookies = document.cookie ? document.cookie.split('; ') : [];
      var i = 0;

      for (; i < cookies.length; i++) {
        var parts = cookies[i].split('=');
        var cookie = parts.slice(1).join('=');

        if (!json && cookie.charAt(0) === '"') {
          cookie = cookie.slice(1, -1);
        }

        try {
          var name = decode(parts[0]);
          cookie = (converter.read || converter)(cookie, name) || decode(cookie);

          if (json) {
            try {
              cookie = JSON.parse(cookie);
            } catch (e) {}
          }

          jar[name] = cookie;

          if (key === name) {
            break;
          }
        } catch (e) {}
      }

      return key ? jar[key] : jar;
    }

    api.set = set;

    api.get = function (key) {
      return get(key, false
      /* read as raw */
      );
    };

    api.getJSON = function (key) {
      return get(key, true
      /* read as json */
      );
    };

    api.remove = function (key, attributes) {
      set(key, '', extend(attributes, {
        expires: -1
      }));
    };

    api.defaults = {};
    api.withConverter = init;
    return api;
  }

  return init(function () {});
});
"use strict";

var previously_viewed_urls = Cookies.getJSON('viewed_urls');
var viewed_urls = [];
var current_url = window.location.pathname;

if ('undefined' !== typeof previously_viewed_urls) {
  viewed_urls = previously_viewed_urls;
}

if (viewed_urls.indexOf(current_url) == -1) {
  viewed_urls.push(window.location.pathname);
}

if ('undefined' !== typeof wp_user_viewed_items_settings) {
  if ('undefined' !== typeof wp_user_viewed_items_settings.cookie_domain) {
    var cookie_args = {
      domain: wp_user_viewed_items_settings.cookie_domain
    };

    if ('undefined' !== typeof wp_user_viewed_items_settings.cookie_secure) {
      cookie_args.secure = wp_user_viewed_items_settings.cookie_secure;
    } else {
      cookie_args.secure = false;
    }

    if ('undefined' !== typeof wp_user_viewed_items_settings.cookie_expires) {
      cookie_args.expires = parseInt(wp_user_viewed_items_settings.cookie_expires, 10);
    } else {
      cookie_args.expires = 30;
    }

    Cookies.set('viewed_urls', viewed_urls, cookie_args);
  }

  if ('undefined' !== typeof wp_user_viewed_items_settings.items_read_number) {
    var items_read_number = wp_user_viewed_items_settings.items_read_number;
  }

  if ('undefined' !== typeof wp_user_viewed_items_settings.action_to_perform) {
    var action_to_perform = wp_user_viewed_items_settings.action_to_perform;
  }

  if ('undefined' !== typeof wp_user_viewed_items_settings.popup_to_load) {
    var popup_to_load = wp_user_viewed_items_settings.popup_to_load;
  }

  if (items_read_number < viewed_urls.length && 'popup' === action_to_perform && 'undefined' !== typeof popup_to_load) {
    jQuery(document).on('pumInit', '#popmake-' + popup_to_load, function () {
      // we would have to save this popup id as a plugin setting
      PUM.open(popup_to_load); // we would have to save this popup id as a plugin setting
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
